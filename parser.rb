#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require_relative 'lexer'
  require_relative 'functions'
class StringExecutor < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 48)
  include Functions
  @@forms = Hash.new()
  @@debug = true 
  @@marker = "'" 
  def initialize
    puts "hello"
    
    @lexical = Lexical.new
    p @@forms
  end
  def parse(input)
    @lol = @lexical.scan_str(input) 
    do_parse
  end

  def next_token
    @lol.shift
  end
  
  def forms_array
    @@forms
  end
  
  def debug
    @@debug
  end
  
  def marker
    @@marker
  end
  
  def debug=(x)
    @@debug = x
  end
  
  def marker=(x)
    @@marker = x
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,     2,     6,     6,    16,     7,     7,     2,     2,     6,
     6,    12,     7,     7,     9,    10,    11,    17,    18,     8 ]

racc_action_check = [
     0,    16,     0,    16,    13,     0,    16,    12,    10,    12,
    10,     9,    12,    10,     6,     6,     8,    14,    15,     1 ]

racc_action_pointer = [
    -2,    19,   nil,   nil,   nil,   nil,    10,   nil,    16,     6,
     6,   nil,     5,     1,    11,    12,    -1,   nil,   nil,   nil ]

racc_action_default = [
   -10,   -10,    -1,    -2,    -3,    -4,   -10,    -9,   -10,   -10,
   -10,    20,   -10,    -5,   -10,   -10,   -10,    -8,    -7,    -6 ]

racc_goto_table = [
    14,     1,    15,   nil,   nil,   nil,    19 ]

racc_goto_check = [
     5,     1,     5,   nil,   nil,   nil,     5 ]

racc_goto_pointer = [
   nil,     1,   nil,   nil,   nil,   -10 ]

racc_goto_default = [
   nil,    13,     3,     4,     5,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 9, :_reduce_1,
  1, 9, :_reduce_2,
  1, 9, :_reduce_3,
  1, 9, :_reduce_4,
  1, 13, :_reduce_5,
  3, 13, :_reduce_6,
  5, 10, :_reduce_7,
  4, 12, :_reduce_8,
  1, 11, :_reduce_9 ]

racc_reduce_n = 10

racc_shift_n = 20

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :COMMA => 3,
  :SHARP => 4,
  :LEFT_P => 5,
  :RIGHT_P => 6,
  :PASSIVE => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "COMMA",
  "SHARP",
  "LEFT_P",
  "RIGHT_P",
  "PASSIVE",
  "$start",
  "expression",
  "neutral_combination",
  "passive_combination",
  "active_combination",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 2)
  def _reduce_1(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 3)
  def _reduce_2(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_3(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 5)
  def _reduce_4(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_5(val, _values, result)
     return ([] << val[0]).flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 9)
  def _reduce_6(val, _values, result)
     return (([] << val[0]).flatten + ([] << val[2]).flatten).flatten  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_7(val, _values, result)
        if @@debug
      print "\#\#(#{val[3][0]}" 
      val[3][1..-1].each { |item|  print("," + item.to_s) }
      print ") \n"
    end
  	res = self.send(val[3][0].to_sym, *(val[3][1..-1]))
  	return res.to_s
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_8(val, _values, result)
        if @@debug
      print "\#(#{val[2][0]}" 
      val[2][1..-1].each { |item|  print("," + item.to_s) }
      print ") \n"
    end
  	res = self.send(val[2][0].to_sym, *(val[2][1..-1]))
  	internal_parser = StringExecutor.new
    return internal_parser.parse(res.to_s)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_9(val, _values, result)
     return val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class StringExecutor
