#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "lexer.rex".
#++

require 'racc/parser'
class Lexical < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader   :lineno
  attr_reader   :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno =  1
    @state  = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end
  alias :scan :scan_str

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file( filename )
    load_file(filename)
    do_parse
  end


  def next_token
    return if @ss.eos?
    
    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno  +=  1  if text == "\n"
    token = case @state
    when nil
      case
      when (text = @ss.scan(/[\w\d\s\:]+/))
         action { [:STRING, text.to_s ]}

      when (text = @ss.scan(/\#/))
         action { [:SHARP, text.to_s ]}

      when (text = @ss.scan(/\,/))
         action { [:COMMA, text.to_s ] }

      when (text = @ss.scan(/\(/))
         action { [:LEFT_P, text.to_s] }

      when (text = @ss.scan(/\)/))
         action { [:RIGHT_P, text.to_s] }

      when (text = @ss.scan(/[\s\t\n]+/))
        ;

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    else
      raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
  end  # def _next_token

  def scan_str(code)
    scan_setup(code)
    tokens = []
    while token = next_token      
      if token[0] == :LEFT_P and tokens[-1][0] != :SHARP
        passive_string = ""
        i = 1
        while i != 0
          token = next_token
          i += 1 if token[0] == :LEFT_P
          i -= 1 if token[0] == :RIGHT_P
          passive_string += token[1].to_s 
        end
        tokens << [:PASSIVE, passive_string[0..-2]]
      else   
        tokens << token
      end
    end
    tokens
  end
end # class
